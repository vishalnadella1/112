from cmu_graphics import *
from datetime import date
from datetime import datetime
import math
from scipy.stats import norm
import pytz
import yfinance


daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
months = ['January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December']
daysOfTheWeek = {'Sunday': 0, 'Monday': 1, 'Tuesday': 2, 'Wednesday':3, 'Thursday': 4, 'Friday': 5, 'Saturday' :6}

def onAppStart(app):
    app.state = 0
    app.width = 800
    app.height = 800
    app.stockPrice = 100
    app.Tickertext = 'Ticker:'
    app.strikePos = app.width//2
    app.radius = 25
    app.radius2 = 25
    app.radius3 = 25
    app.strikePrice = app.stockPrice
    app.vol = 0.5
    app.sizeUp1 = 0
    app.sizeUp2 = 0
    app.sizeUp3 = 0
    app.optionType = None
    app.currentMonth = datetime.now().month-1 
    app.currentYear = datetime.now().year
    app.selectedDate = None
    app.background = 'white'
    app.firstDay = daysOfTheWeek[date(2024, 12, 1).strftime("%A")]
    app.error = False



def redrawAll(app):
    if app.state == 0:
        drawHomeScreen(app)
    if app.state == 1:
        drawStockScreen(app)
    if app.state == 2:
        drawCalendar(app)
    if app.state == 3:
        drawProfitScreen(app)
        
def drawHomeScreen(app):
    drawRect(0,0, app.width, app.height, fill = 'lightSalmon')
    drawLabel('112 Option Calculator', app.width/2, 60, bold = True, size = 60, font = 'monospace')
    drawImage('https://img.freepik.com/premium-vector/stock-market-bar-graph-candlestick-chart-finance-trade-data-vector-illustration_622428-8056.jpg', app.width/2, app.height/2, align = 'center')
    drawLabel(app.Tickertext, app.width/2, 700, size = 45, font = 'monospace', bold = True)
    
def drawStockScreen(app):
    drawRect(0,0, app.width, app.height, fill = 'black')
    drawLabel(f'Option Type: {app.optionType}', app.width//2, 100, fill = 'white', size = 16)
    drawLabel(app.Tickertext, app.width/2, 40, bold = True, size = 60, font = 'monospace', fill = 'white')
    drawRect(200, 110, 160+app.sizeUp1, 80+app.sizeUp1, fill = 'green', align = 'center')
    drawLabel('CALL', 200, 110, size = 30+app.sizeUp1, fill = 'white', font = 'monospace', bold= True)
    drawRect(600, 110, 160+app.sizeUp2, 80+app.sizeUp2, fill = 'red', align = 'center')
    drawLabel('PUT', 600, 110, size = 30+app.sizeUp2, fill = 'white', font = 'monospace', bold= True)
    stockSlider(app)
    expirationDateCalendar(app)
    volatilitySlider(app)
    enterButton(app)

def stockSlider(app):
    drawLabel('Strike Price', app.width//2, 180, fill = 'white', bold=True, font = 'monospace', size = 30)
    for i in range(38):
        if i == 16:
            drawRegularPolygon(app.strikePos, 220, app.radius , 3, fill = 'white', rotateAngle = 180)
            drawLabel(app.strikePrice, app.strikePos, 220, fill = 'black', size = 12, bold = True, font = 'monospace')
        if i%2 == 0:
            drawLabel(app.stockPrice//2 + i*app.stockPrice//38, 30+i*740/38, 270, fill = 'white', size = 12, align = 'center')
        if (i+1)%3 == 0:
            drawLine(30+i*20, 230, 30+i*20, 240, fill = 'white')
            drawLine(30+i*20, 290, 30+i*20, 300, fill = 'white')
        else:
            drawLine(30+i*20, 230, 30+i*20, 235, fill = 'white')
            drawLine(30+i*20, 295, 30+i*20, 300, fill = 'white')
def expirationDateCalendar(app):    
    drawLabel('Expiration Date', app.height//2, app.width//2-55, fill = 'white', font = 'monospace', bold = True, size = 30)
    drawRect(app.width//2, app.height//2+50,  300+app.sizeUp3, 100+app.sizeUp3, align = 'center', fill = 'lightSeaGreen')
    if app.selectedDate == None:
        drawLabel('Select Date', app.width//2, app.height//2+50, size = 35, fill = 'white', font = 'monospace')
    else:
         drawLabel(f'{app.selectedDate[2]} {months[app.selectedDate[1]]} {app.selectedDate[0]}', app.width//2, app.height//2+50, size = 30, fill = 'white', font = 'monospace')


def drawCalendar(app):
    drawLabel(f"{months[app.currentMonth]} {app.currentYear}", app.width / 2, 50, size=24, bold=True, align='center')
    
    days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
    for i in range(len(days)):
        drawLabel(days[i], 100 + i * 100, 100, size=16, bold=True, align='center')
    
    daysInThisMonth = daysInMonth[app.currentMonth]
    if app.currentMonth == 1 and isLeapYear(app.currentYear): 
        daysInThisMonth = 29
    

    row, col = 0, app.firstDay
    for day in range(1, daysInThisMonth + 1):
        x = 100 + col * 100
        y = 150 + row * 100
        if app.selectedDate == (app.currentYear, app.currentMonth, day):
            drawRect(x , y , 40, 40, fill='lightblue', border='blue', borderWidth=2, align = 'center')
        drawLabel(day, x, y, size=16)
        col += 1
        if col > 6: 
            col = 0
            row += 1
    
    drawLabel('Right and Left Arrows to Change Months', app.width//2, app.height-180, size = 20 )
    drawLabel('Click a Date to Select', app.width//2, app.height-150, size=20)
    drawLabel('Press Enter to Confirm Date', app.width//2, app.height-120, size=20)

    if not checkFutureDate(app) and app.selectedDate != None:
        drawLabel('Date Selected is in the Past', app.width//2, app.height-50, bold = True, size = 40, fill = 'red')

def isLeapYear(year):
    return year % 4 == 0

def closest(x,y):
    return rounded(x / 100) * 100 ,  rounded((y+50)/ 100) * 100

def checkFutureDate(app):
    if app.selectedDate != None:
        d = datetime(app.selectedDate[0], app.selectedDate[1]+1, app.selectedDate[2],3 , 0)
        today = datetime.now()
        return d > today


def volatilitySlider(app):
    drawLabel(f'Implied Volatility:{rounded(app.vol*100)}%', app.width//2, 550, fill = 'white', bold=True, font = 'monospace', size = 30)
    drawRegularPolygon(670, 530, app.radius2 , 3, fill = 'white')
    drawRegularPolygon(670, 570, app.radius3 , 3, fill = 'white', rotateAngle = 180)

def enterButton(app):
    if app.optionType != None:
        if app.selectedDate != None:
            drawLabel('Press Enter',app.width/2, 700, bold = True, size = 40, font = 'monospace', fill = 'yellow')


def drawProfitScreen(app):
    cell_width = 80
    cell_height = 50
    table_x = 50
    table_y = 50
    prices = [app.stockPrice + app.stockPrice//2 - app.stockPrice//10*i for i in range(11)]
    dates = generate_dates(datetime.now(),  datetime(app.selectedDate[0], app.selectedDate[1]+1, app.selectedDate[2], 15, 0))
    for col, date in enumerate(dates):
        x = table_x + (col + 1) * cell_width
        drawRect(x, table_y, cell_width, cell_height, fill='lightgray')
        drawLabel(date.strftime('%Y-%m-%d') , x + cell_width / 2, table_y + cell_height / 2, size=10, align='center')

    for row, price in enumerate(prices):
        y = table_y + (row + 1) * cell_height
        drawRect(table_x, y, cell_width, cell_height, fill='lightgray')
        drawLabel(f"${price}", table_x + cell_width / 2, y + cell_height / 2, size=12, align='center')
        for col in range(len(dates)):
            x = table_x + (col + 1) * cell_width
            drawRect(x, y, cell_width, cell_height, fill='white', border = 'black')
            drawLabel(rounded((findCurrentPrice(app, dates[col], price) - findCurrentPrice(app, datetime.now(), app.stockPrice))*100), x + cell_width / 2, y + cell_height / 2, size=10, align='center')


def generate_dates(now,  future):
    delta = (future - now) / (7)
    return [(now + i * delta)for i in range(7)]

def findCurrentPrice(app, date, price):
    future = datetime(app.selectedDate[0], app.selectedDate[1]+1, app.selectedDate[2], 15, 0)
    time = future - date
    time = time.days/365
    if app.optionType == 'Call':
        currentOptionPrice = callOptionPricer(price, time, app.strikePrice, 0.0431, app.vol)
    else:
        currentOptionPrice = putOptionPricer(price, time, app.strikePrice, 0.0431, app.vol)
    return currentOptionPrice
def callOptionPricer(stockPrice, time, strikePrice, interestRate, IV):
    presentValue = strikePrice * math.exp(-1*interestRate*time)
    d1 = (math.log(stockPrice/strikePrice)+((interestRate+(IV**2)/2)*time))/(IV*(time**0.5))
    d2 = d1 - (IV*(time**0.5))
    return norm.cdf(d1)*stockPrice - norm.cdf(d2)*presentValue

def putOptionPricer(stockPrice, time, strikePrice, interestRate, IV):
    presentValue = strikePrice * math.exp(-1*interestRate*time)
    d1 = (math.log(stockPrice/strikePrice)+((interestRate+(IV**2)/2)*time))/(IV*(time**0.5))
    d2 = d1 - (IV*(time**0.5))
    return norm.cdf(-1*d2)*presentValue  - stockPrice * norm.cdf(-1*d1)



def onKeyPress(app, key):
    if app.state == 0:
        if key == 'enter':
            app.state = 1
            app.stockPrice = 100
        elif key == 'backspace' and len(app.Tickertext)>7:
            app.Tickertext = app.Tickertext[:-1]
        elif key.isalpha() and len(key) == 1:
            app.Tickertext += key.upper()
    if app.state == 1:
        if key == 'enter' and app.optionType != None and app.selectedDate != None:
            app.state = 3
    if app.state == 2:
        if key == 'left':
            app.firstDay = (app.firstDay - daysInMonth[app.currentMonth-1])%7
            app.currentMonth -= 1
        if app.currentMonth < 0:
            app.currentMonth = 11
            app.currentYear -= 1
        elif key == 'right':
            app.firstDay = (app.firstDay + daysInMonth[app.currentMonth])%7
            if isLeapYear(app.currentYear) and app.currentMonth == 1:
                app.firstDay += 1
                app.firstDay%= 7
            app.currentMonth += 1
            if app.currentMonth > 11:
                app.currentMonth = 0
                app.currentYear += 1
        elif key == 'enter':
            if checkFutureDate(app):
                app.state =1 



def onKeyHold(app, keys):
    if app.state == 0:
        if 'backspace' in keys and len(app.Tickertext)>7:
            app.Tickertext = app.Tickertext[:-1]

def onMouseMove(app, mouseX, mouseY):
    if app.state == 1:
        if inTriangle(mouseX, mouseY,  app.strikePos,210,25):
            app.radius = 35
        else: app.radius = 25
        if inRect(mouseX, mouseY, 200, 110, 160, 80):
            app.sizeUp1 = 10
        else: app.sizeUp1 = 0
        if inRect(mouseX, mouseY, 600, 110, 160, 80):
            app.sizeUp2 = 10
        else: app.sizeUp2 = 0
        if inRect(mouseX, mouseY, app.width//2, app.height//2+50, 300, 100):
            app.sizeUp3 = 10
        else: app.sizeUp3 = 0
        if inTriangle(mouseX, mouseY,  670,530,25):
            app.radius2 = 30
        else: app.radius2 = 25
        if inTriangle(mouseX, mouseY,  670,570,25):
            app.radius3 = 30
        else: app.radius3 = 25
def inRect(x1, y1, centerX, centerY, width, height):
    if x1> centerX-width/2 and x1< centerX + width/2:
        if y1> centerY - height/2 and y1< centerY + height/2:
            return True
    else: return False

def inTriangle(x1,y1, centerX, centerY, radius):
    return ((centerX-x1)**2 + (centerY - y1)**2)**0.5 <  30

def onMouseDrag(app, mouseX, mouseY):
    if app.state == 1:
        if app.radius == 35 and mouseX>40 and mouseX<760:
            app.strikePos = mouseX
            app.strikePrice = rounded(app.stockPrice//2+app.stockPrice*(mouseX-30)/740)
def onMousePress(app, mouseX, mouseY):
    if app.state == 1:
        if inRect(mouseX, mouseY, 200, 110, 160, 80):
            app.optionType = 'Call'
        if inRect(mouseX, mouseY, 600, 110, 160, 80):    
            app.optionType = 'Put'
        if inRect(mouseX, mouseY, app.width//2, app.height//2+50, 300, 100):
            app.state = 2
        if inTriangle(mouseX, mouseY,  670,530,25):
            app.vol +=0.01
        if inTriangle(mouseX, mouseY,  670,570,25):
            if app.vol > 0:
                app.vol -=0.01

    if app.state == 2:
        x,y = closest(mouseX, mouseY)
        col = (x - 100) // 100
        row = (y - 150) // 100
        day = row * 7 + col - app.firstDay + 1
        daysInThisMonth = daysInMonth[app.currentMonth]
        if app.currentMonth == 1 and isLeapYear(app.currentYear):
            daysInThisMonth = 29
        if 1 <= day <= daysInThisMonth:
            app.selectedDate = (app.currentYear, app.currentMonth, day)


runApp()
